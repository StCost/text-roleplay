{"version":3,"sources":["components/Menu/index.tsx","helpers/dice.tsx","helpers/utils.tsx","reducers/index.ts","helpers/store.tsx","actions/index.tsx","components/Avatar/index.tsx","components/Chat/MessageBody.tsx","components/Chat/Message.tsx","components/Chat/index.tsx","components/Settings/Loader.tsx","components/Settings/index.tsx","configs/routes.tsx","components/Logout/index.tsx","components/Login/index.tsx","components/Router/index.tsx","App.tsx","helpers/firebase.tsx","sagas/index.tsx","serviceWorker.ts","index.tsx"],"names":["connect","state","isLoggedIn","withRouter","props","style","width","mode","selectedKeys","location","pathname","split","pop","menu","map","value","Item","key","path","disabled","to","label","Fragment","diceRegex","diceRegexG","rollDice","amount","size","Array","fill","min","max","Math","floor","random","window","randomInt","colorFromString","str","hash","i","length","charCodeAt","color","toString","substr","isOnline","time","parseInt","localStorage","getItem","Date","getTime","doubleDigit","date","getHours","getMinutes","getSeconds","join","getDate","getMonth","getFullYear","getFullTime","isURL","RegExp","test","processMessages","messages","filter","item","pos","self","findIndex","_i","sort","a","b","m","index","author","grouped","formatMessage","message","body","rolls","match","roll","_amount","_size","results","maxResult","minResult","sum","reduce","exportRolls","isRP","mentioned","user","JSON","parse","setItem","uid","initialState","userData","settings","loading","users","defaultUser","nickname","avatar","lastOnline","reducer","action","type","concat","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","composeWithDevTools","applyMiddleware","dispatch","createAction","payload","createAsyncAction","typeName","toLowerCase","replace","toUpperCase","actions","updateLastOnline","logout","Avatar","rest","_avatar","src","backgroundColor","MessageBody","alt","videoId","URL","searchParams","get","title","id","height","frameBorder","href","target","rel","_body","_rolls","word","rollIndex","splice","summing","className","importRolls","Message","placement","indexOf","extra","Chat","sending","componentDidMount","getMessages","subscribe","setState","componentWillUnmount","unsubscribe","componentDidUpdate","prevProps","forEach","getUser","onChangeMessage","event","onKeyDown","shiftKey","preventDefault","onSendMessage","find","currentTarget","selectionStart","sendMessage","notify","error","getMoreMessages","firstMessage","onScroll","scrollTop","uploadFile","file","onPaste","e","clipboardData","files","onDrop","dataTransfer","items","getAsFile","render","spinning","TextArea","placeholder","autoSize","minRows","maxRows","onChange","SendOutlined","onClick","Component","Loader","SyncOutlined","spin","CheckCircleTwoTone","twoToneColor","Settings","field","newSettings","setSettings","setUser","clearAvatar","getField","display","ClearOutlined","margin","defaultValue","Object","keys","React","URLSearchParams","params","routes","component","exact","onFinish","values","login","name","rules","required","Password","htmlType","Login","App","callback","eventName","document","addEventListener","listenForActivity","auth","initializeApp","firebaseConfig","fbAuth","database","fbDatabase","onAuthStateChanged","loginSuccess","watchForActions","email","password","signInWithEmailAndPassword","stringify","console","code","createUserWithEmailAndPassword","loginFail","removeItem","signOut","ref","child","set","setUserSuccess","sendMessageSuccess","sendMessageFail","orderByKey","limitToLast","on","rawMessages","val","getMessagesSuccess","off","once","endAt","requestedUsers","rawUser","getUserSuccess","request","XMLHttpRequest","formData","FormData","append","open","setRequestHeader","onreadystatechange","status","readyState","res","responseText","data","link","send","takeLatest","Boolean","hostname","run","saga","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.cf74737e.chunk.js","sourcesContent":["import React from 'react';\nimport { Menu as AntdMenu } from 'antd';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport menu from '../../configs/menu.json';\nimport { IState } from '../../reducers';\n\ninterface IMenuProps extends RouteComponentProps {\n  isLoggedIn: boolean;\n}\n\nfunction Menu(props: IMenuProps) {\n  if (!props.isLoggedIn) {\n    return <React.Fragment/>;\n  }\n\n  return (\n    <AntdMenu\n      style={{ width: '124px' }}\n      mode=\"inline\"\n      selectedKeys={[props.location.pathname.split('/').pop() || '']}\n    >\n      {menu.map((value) => (\n        <AntdMenu.Item\n          key={value.path.split('/').pop()}\n          disabled={value.path === props.location.pathname}\n        >\n          <Link to={value.path}>\n            {value.label}\n          </Link>\n        </AntdMenu.Item>\n      ))}\n    </AntdMenu>\n  );\n}\n\nexport default connect((state: IState) => ({ isLoggedIn: state.isLoggedIn }))(withRouter(Menu));\n","import React from 'react';\nimport { Tooltip } from 'antd';\n\nexport interface IRoll {\n  roll: string;\n  results: number[];\n  amount: number;\n  size: number;\n  maxResult: number;\n  minResult: number;\n  sum: number;\n}\n\nexport const getRandomInt = (min: number, max: number) =>\n  Math.floor(Math.random() * ((max + 1) - min) + min);\n\nexport const diceRegex = /([1-9]|10)[dд]([468]|10|12|20)/miu;\nexport const diceRegexG = /([1-9]|10)[dд]([468]|10|12|20)/miug;\n\nexport const rollDice = (amount: number, size: number) => {\n  return new Array(amount).fill(amount + size).map(() => getRandomInt(0, size));\n};\n\nexport const exportRolls = (str: string) => {\n  const rolls = str.match(diceRegexG);\n  if (rolls) {\n    return rolls.map((roll: string): IRoll => {\n      const [_amount,_size] = roll.split(/[dд]/);\n      const amount = parseInt(_amount);\n      const size = parseInt(_size);\n      const results = rollDice(amount, size);\n\n      return ({\n        maxResult: size * amount,\n        minResult: amount,\n        sum: results.reduce((a, b) => a + b, 0),\n        roll,\n        results,\n        amount,\n        size,\n      })\n    });\n  }\n  return [];\n};\n\nexport const importRolls = (body: string, _rolls: IRoll[]) => {\n  const rolls = [..._rolls]; // Avoid mutations\n  return body.split(' ').map((word: string, index: number) => {\n    const rollIndex = rolls.findIndex(({ roll }) => roll === word);\n    if (rollIndex > -1) {\n      const {\n        results,\n        maxResult,\n        minResult,\n        sum\n      } = rolls.splice(rollIndex, 1)[0];\n\n      const summing = `${sum} = ${results.join(' + ')}`;\n      const className = (sum === maxResult && 'critHit') || (sum === minResult && 'critMiss') || '';\n      return (\n        <React.Fragment key={word + index}>\n          {' '}\n          <Tooltip title={summing}>\n            <b className={className}>\n              {word}({sum})\n            </b>\n          </Tooltip>\n        </React.Fragment>\n      )\n    }\n    return ` ${word}`;\n  });\n};\n","import randomInt from 'random-seed';\nimport actions from '../actions';\nimport { IMessage } from '../reducers';\nimport { diceRegex, exportRolls } from './dice';\n// @ts-ignore\nwindow.randomInt = randomInt;\n\nexport const camelize = (str: string) => {\n  return str\n    .toLowerCase()\n    .replace(/_./g, (m) => m.toUpperCase())\n    .replace(/_/g, '')\n};\n\nexport const colorFromString = (str: string) => {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = '#';\n  for (let i = 0; i < 3; i++) {\n    let value = (hash >> (i * 8)) & 0xFF;\n    color += ('00' + value.toString(16)).substr(-2);\n  }\n\n  return color;\n};\n\nexport const isOnline = (time?: number) => {\n  if (!time) return false;\n  const lastActivity = time || parseInt(localStorage.getItem('lastActivity') || '0');\n  return (lastActivity + 180000) > new Date().getTime();\n};\n\nexport const doubleDigit = (str: number) => `${str}`.length === 1\n  ? `0${str}`\n  : str;\n\nexport const getTime = (time: number) => {\n  const date = new Date(time);\n  return [date.getHours(), date.getMinutes(), date.getSeconds()].map(doubleDigit).join(':');\n};\n\nexport const getDate = (time: number) => {\n  const date = new Date(time);\n  return [date.getDate(), date.getMonth() + 1, date.getFullYear()].map(doubleDigit).join('.');\n};\n\nexport const getFullTime = (time: number) => {\n  const date = new Date(time);\n  const messageTime = [date.getHours(), date.getMinutes(), date.getSeconds()].map(doubleDigit).join(':');\n  const messageDate = [date.getDate(), date.getMonth() + 1, date.getFullYear()].map(doubleDigit).join('.');\n\n  return [messageTime, messageDate].join(' ');\n};\n\nexport const listenForActivity = () => {\n  const callback = () => {\n    if (!isOnline(parseInt(localStorage.getItem('lastActivity') || '0') - 60000))\n      actions.updateLastOnline({});\n  };\n\n  [\n    'mousedown',\n    'mousemove',\n    'keydown',\n    'scroll',\n    'touchstart'\n  ].forEach((eventName) => {\n    document.addEventListener(eventName, callback, true);\n  });\n  callback();\n};\n\nexport const isURL = (str: string) => {\n  const pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\n    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n    '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n    '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n  return !!pattern.test(str);\n};\n\nexport const processMessages = (messages: IMessage[]) => {\n  return messages\n    .filter((item: IMessage, pos: number, self: IMessage[]) =>\n      self.findIndex((_i: IMessage) => _i.time === item.time) === pos\n    )\n    .sort((a: IMessage, b: IMessage) => b.time - a.time)\n    .map((m: IMessage, index: number, messages: IMessage[]) => {\n      if (index < messages.length - 2) {\n        if (m.author === messages[index + 1].author) {\n          return {\n            ...m,\n            grouped: true,\n          }\n        }\n      }\n      return m;\n    })\n};\n\nexport const formatMessage = (message: IMessage) => {\n  const { body } = message;\n\n  if (diceRegex.test(body)) {\n    message.rolls = exportRolls(body);\n  }\n\n  if (/\\*/.test(body)) {\n    message.isRP = true;\n  }\n\n  if (/(@[a-zа-яё]*)/mui.test(body)) {\n    message.mentioned = true;\n  }\n\n  return message;\n};\n","import { processMessages } from '../helpers/utils';\nimport { IRoll } from \"../helpers/dice\";\n\nexport interface IAction {\n  type: string;\n\n  [key: string]: any; // Payload could be any type or size\n}\n\nexport interface IMessage {\n  author: string;\n  time: number;\n  body: string;\n  // Remove header and top margin of message, because author is the same\n  grouped?: boolean;\n  isCommand?: boolean;\n  isRP?: boolean;\n  commandResult?: string;\n  mentioned?: boolean;\n  rolls?: IRoll[];\n}\n\nexport interface IUsers {\n  [key: string]: IUser;\n}\n\nexport interface IState {\n  userData: IUser | null;\n  isLoggedIn: boolean;\n  settings: IUser | false;\n  loading: boolean;\n  messages: IMessage[];\n  users: IUsers;\n  uid: string;\n}\n\nconst user = JSON.parse(localStorage.getItem('user') || 'null');\nif (user) localStorage.setItem('uid', user.uid);\nexport const initialState: IState = {\n  userData: user,\n  isLoggedIn: user !== null,\n  settings: false,\n  loading: false,\n  messages: [],\n  users: {},\n  uid: user ? user.uid : '',\n};\n\nexport interface IUser {\n  nickname: string;\n  avatar: string;\n  uid: string,\n  lastOnline: number;\n}\n\nexport const defaultUser = {\n  nickname: '',\n  avatar: '',\n  uid: '',\n  lastOnline: 0,\n};\n\nconst reducer = (state = initialState, action: IAction) => {\n  switch (action.type) {\n    case 'LOGIN':\n    case 'GET_MESSAGES':\n    case 'GET_MORE_MESSAGES':\n    case 'SEND_MESSAGE':\n    case 'SET_USER':\n    case 'UPLOAD_FILE': {\n      return {\n        ...state,\n        loading: true,\n      }\n    }\n    case 'LOGIN_FAIL':\n    case 'SET_USER_SUCCESS':\n    case 'SET_USER_FAIL':\n    case 'GET_MESSAGES_FAIL':\n    case 'GET_MORE_MESSAGES_SUCCESS':\n    case 'GET_MORE_MESSAGES_FAIL':\n    case 'SEND_MESSAGE_FAIL': {\n      return {\n        ...state,\n        loading: false,\n      }\n    }\n    case 'LOGIN_SUCCESS': {\n      return {\n        ...state,\n        uid: action.user.uid,\n        userData: action.user,\n        isLoggedIn: action.user !== null,\n      }\n    }\n    case 'LOGOUT': {\n      return {\n        ...state,\n        userData: null,\n        isLoggedIn: false,\n      }\n    }\n    case 'GET_MESSAGES_SUCCESS': {\n      const messages = action.concat\n        ? [...state.messages, ...action.messages]\n        : action.messages;\n\n      return {\n        ...state,\n        messages: processMessages(messages),\n        loading: false,\n      }\n    }\n    case 'GET_USER_SUCCESS': {\n      return {\n        ...state,\n        users: {\n          ...state.users,\n          [action.user.uid]: action.user,\n        },\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { initialState } from '../reducers';\nimport reducers from '../reducers'\n\nexport const sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  reducers,\n  initialState,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nexport default store;\n","import store from '../helpers/store';\nimport { camelize } from '../helpers/utils';\n\nconst dispatch = store.dispatch;\n\nexport interface IPayload {\n  [key: string]: any;\n}\n\ninterface IActions {\n  [key: string]: (payload: IPayload) => void;\n}\n\nconst createAction =\n  (type: string) =>\n    (payload?: IPayload) =>\n      dispatch({ type, ...payload });\n\nconst createAsyncAction = (type: string) => {\n  const typeName = camelize(type);\n  return {\n    [typeName]: createAction(type),\n    [`${typeName}Success`]: createAction(`${type}_SUCCESS`),\n    [`${typeName}Fail`]: createAction(`${type}_FAIL`),\n  }\n};\n\nconst actions: IActions = {\n  ...createAsyncAction('LOGIN'),\n  ...createAsyncAction('GET_USER'),\n  ...createAsyncAction('GET_MESSAGES'),\n  ...createAsyncAction('GET_MORE_MESSAGES'),\n  ...createAsyncAction('SET_USER'),\n  ...createAsyncAction('SEND_MESSAGE'),\n  ...createAsyncAction('SUBSCRIBE'),\n  ...createAsyncAction('UNSUBSCRIBE'),\n  ...createAsyncAction('UPLOAD_FILE'),\n  updateLastOnline: createAction('UPDATE_LAST_ONLINE'),\n  logout: createAction('LOGOUT'),\n};\n\nexport default actions;\n","import React from 'react';\nimport { Avatar as AntdAvatar } from 'antd';\nimport { AvatarProps } from 'antd/es/avatar';\nimport { colorFromString, isURL } from \"../../helpers/utils\";\n\ninterface IAvatarProps extends AvatarProps {\n  avatar: string;\n  nickname: string;\n}\n\nconst Avatar = (props: IAvatarProps) => {\n  const { avatar, nickname, style, ...rest } = props;\n\n  const _avatar = isURL(avatar) ? avatar : '';\n  return (\n    <AntdAvatar\n      src={_avatar}\n      style={{ ...style, backgroundColor: _avatar ? 'transparent' : colorFromString(nickname) }}\n      {...rest}\n    >\n      {nickname}\n    </AntdAvatar>\n  )\n};\n\nexport default Avatar;\n","import React from 'react';\nimport { isURL } from '../../helpers/utils';\nimport { IMessage } from '../../reducers';\nimport { importRolls } from '../../helpers/dice';\n\ninterface IMessageBodyProps {\n  message: IMessage;\n}\n\nconst MessageBody = (props: IMessageBodyProps) => {\n  const {\n    body,\n    isRP,\n    rolls,\n  } = props.message;\n\n  if (isURL(body)) {\n    if (/\\.(gif|jpe?g|tiff|png|webp|bmp)$/i.test(body)) {\n      return (\n        <img\n          src={body}\n          alt=\"\"\n        />\n      )\n    }\n\n    if (/youtu/.test(body)) {\n      const videoId = new URL(body).searchParams.get('v') || '';\n\n      return (\n        <iframe\n          title={videoId}\n          id=\"ytplayer\"\n          width=\"100%\"\n          height=\"360\"\n          src={`http://www.youtube.com/embed/${videoId}`}\n          frameBorder=\"0\"\n        />\n      )\n    }\n\n    return (\n      <a\n        href={body}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {body}\n      </a>\n    )\n  }\n\n  const _body = rolls\n    ? importRolls(body, rolls)\n    : body;\n\n  if (isRP) {\n    return (\n      <i className=\"rp-message\">\n        {_body}\n      </i>\n    )\n  }\n\n  return <span>{_body}</span>;\n};\n\nexport default MessageBody;\n","import React from 'react';\nimport { Card, Tooltip } from 'antd';\nimport { Link } from 'react-router-dom';\n\nimport { IMessage, IUser } from '../../reducers';\nimport Avatar from '../Avatar';\nimport MessageBody from './MessageBody';\nimport {\n  getDate,\n  getFullTime,\n  getTime,\n  isOnline\n} from '../../helpers/utils';\n\ninterface IMessageProps {\n  message: IMessage,\n  user: IUser,\n}\n\nconst Message = (props: IMessageProps) => {\n  const {\n    message: {\n      time,\n      grouped,\n      body,\n      mentioned,\n    },\n    user,\n  } = props;\n\n  const title = user && (\n    <Link to={`./${user.uid}/settings`}>\n      <Tooltip\n        title={user.lastOnline && `Last activity: ${getFullTime(user.lastOnline)}`}\n        placement=\"left\"\n      >\n        <div className={`chat-message__title ${isOnline(user.lastOnline) ? 'online' : ''}`}>\n          <Avatar\n            avatar={user.avatar}\n            nickname={user.nickname}\n          />\n          <div className=\"chat-message__nickname\">\n            {user.nickname}\n          </div>\n        </div>\n      </Tooltip>\n    </Link>\n  );\n\n  return (\n    <Card\n      className={`chat-message ${grouped ? 'grouped' : ''} ${mentioned && user && (body.indexOf(`@${user.nickname} `) > -1) ? 'mentioned' : ''}`}\n      title={title}\n      key={time}\n      extra={(\n        <Tooltip title={getDate(time)}>\n          <div className=\"chat-time\">{getTime(time)}</div>\n        </Tooltip>\n      )}\n    >\n      <MessageBody message={props.message}/>\n    </Card>\n  );\n};\n\nexport default Message;\n","import React, {\n  ChangeEvent,\n  Component,\n  KeyboardEvent,\n  ClipboardEvent,\n  DragEvent,\n} from 'react';\nimport { connect } from 'react-redux';\nimport { SendOutlined } from '@ant-design/icons';\nimport {\n  Input,\n  message as notify,\n  Spin,\n} from 'antd';\n\nimport './chat.scss';\nimport actions from '../../actions';\nimport { IMessage, IState, IUser, IUsers } from '../../reducers';\nimport Message from './Message';\n\ninterface IChatProps {\n  messages: IMessage[],\n  uid: string,\n  loading: boolean,\n  users: IUsers;\n  user: IUser;\n}\n\ninterface IChatState {\n  message: string;\n  sending: boolean;\n}\n\nclass Chat extends Component<IChatProps, IChatState> {\n  state = {\n    message: '',\n    sending: false,\n  };\n\n  componentDidMount = () => {\n    actions.getMessages({});\n    actions.subscribe({});\n    this.setState({ message: localStorage.getItem('message') || '' });\n  };\n\n  componentWillUnmount = () => {\n    actions.unsubscribe({});\n  };\n\n  componentDidUpdate = (prevProps: IChatProps) => {\n    const { messages, users } = this.props;\n\n    if (this.state.sending && prevProps.messages !== messages) {\n      localStorage.setItem('message', '');\n      this.setState({\n        message: '',\n        sending: false,\n      });\n    }\n\n    messages.forEach((m: IMessage) => {\n      if (!users[m.author]) {\n        actions.getUser({ uid: m.author });\n      }\n    });\n  };\n\n  onChangeMessage = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const message = event.target.value;\n    localStorage.setItem('message', message);\n    this.setState({ message });\n  };\n\n  onKeyDown = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n\n      this.onSendMessage();\n    }\n\n    const { uid } = this.props;\n    if (event.key === 'Up' || event.key === 'ArrowUp') {\n      const message = this.props.messages.find((m: IMessage) => m.author === uid);\n      if (message) {\n        const { currentTarget: { value, selectionStart } } = event;\n        if (value.substr(0, selectionStart).split('\\n').length === 1) {\n          const { body } = message;\n          localStorage.setItem('message', body);\n          this.setState({ message: body });\n        }\n      }\n    }\n  };\n\n  onSendMessage = () => {\n    const { message } = this.state;\n    const { user, loading, uid } = this.props;\n\n    if (loading) {\n      return;\n    }\n\n    if (!user) {\n      notify.error('Not logged in. How are you even here? Contact administration');\n      return;\n    }\n\n    if (!user.nickname) {\n      notify.error('User name is not defined. Go to settings and set it');\n      return;\n    }\n\n    if (!message) {\n      notify.error('Message is empty');\n      return;\n    }\n\n    this.setState({ sending: true });\n    actions.sendMessage({\n      uid,\n      message,\n    });\n  };\n\n  getMoreMessages = () => {\n    actions.getMoreMessages({ firstMessage: this.props.messages[this.props.messages.length - 1] })\n  };\n\n  onScroll = (event: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    if (event.currentTarget.scrollTop <= 50) {\n      this.getMoreMessages();\n    }\n  };\n\n  uploadFile = (file: File, event: ClipboardEvent<HTMLTextAreaElement> | DragEvent<HTMLTextAreaElement>) => {\n    const { uid } = this.props;\n    if (file) {\n      if (file.type.indexOf('image') > -1) {\n        actions.uploadFile({ uid: uid, file });\n      } else {\n        notify.error('Only images can be uploaded');\n      }\n      event.preventDefault();\n    }\n  };\n\n  onPaste = (e: ClipboardEvent<HTMLTextAreaElement>) => {\n    this.uploadFile(e.clipboardData.files[0], e)\n  };\n\n  onDrop = (e: DragEvent<HTMLTextAreaElement>) => {\n    const file = e.dataTransfer.items[0].getAsFile();\n    if (file)\n      this.uploadFile(file, e)\n  };\n\n  render = () => {\n    const { messages, loading, users } = this.props;\n\n    return (\n      <Spin spinning={loading}>\n        <div className={`chat-wrapper`}>\n          <div\n            className=\"chat-body\"\n            onScroll={this.onScroll}\n          >\n            {messages.map((m: IMessage) => (\n              <Message\n                key={m.time}\n                message={m}\n                user={users[m.author]}\n              />\n            ))}\n          </div>\n          <div className=\"chat-controls\">\n            <Input.TextArea\n              placeholder=\"Enter message\"\n              autoSize={{ minRows: 1, maxRows: 10 }}\n              onChange={this.onChangeMessage}\n              onKeyDown={this.onKeyDown}\n              value={this.state.message}\n              onPaste={this.onPaste}\n              onDrop={this.onDrop}\n            />\n            <SendOutlined\n              onClick={this.onSendMessage}\n            />\n          </div>\n        </div>\n      </Spin>\n    )\n  }\n}\n\nconst mapStateToProps = (state: IState) => {\n  const { messages, uid, loading, users } = state;\n\n  return {\n    messages,\n    uid,\n    loading,\n    users,\n    user: users[uid]\n  };\n};\n\nexport default connect(mapStateToProps)(Chat);\n","import React from 'react';\nimport { SyncOutlined, CheckCircleTwoTone } from '@ant-design/icons';\n\nconst Loader = (props: { loading: boolean }) => {\n  const { loading } = props;\n\n  return (\n    <div className=\"loader\">\n      {loading\n        ? (\n          <SyncOutlined spin style={{color: \"#eb2f96\"}} />\n        ) : (\n          <CheckCircleTwoTone twoToneColor=\"#52c41a\"/>\n        )\n      }\n    </div>\n  )\n};\n\nexport default Loader;\n","import React, { ChangeEvent } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Card,\n  Input,\n  Button,\n} from 'antd';\nimport { RouteComponentProps } from 'react-router';\n\nimport { ClearOutlined } from '@ant-design/icons';\n\nimport './settings.scss';\nimport actions from '../../actions';\nimport { IState, IUser, defaultUser } from '../../reducers';\nimport Avatar from '../Avatar';\nimport Loader from \"./Loader\";\n\ninterface ISettingsProps extends RouteComponentProps {\n  loading: boolean;\n  user: IUser | null;\n  uid: string;\n}\n\nexport class Settings extends React.Component<ISettingsProps> {\n  componentDidMount = () => {\n    const { user } = this.props;\n    if (user) {\n      actions.getUser({ uid: user.uid });\n    }\n  };\n\n  onChange = (field: string) => (event: ChangeEvent<HTMLInputElement>) => {\n    // // @ts-ignore\n    // this.setState({ [field]: event.target.value });\n    const newSettings = {\n      ...this.props.user,\n      [field]: event.target.value,\n    };\n\n    this.setSettings(newSettings);\n  };\n\n  setSettings = (newSettings: {}) => {\n    const { user } = this.props;\n    if (user) {\n      actions.setUser({\n        uid: user.uid,\n        user: newSettings,\n      });\n    }\n  };\n\n  clearAvatar = () => this.setSettings({\n    ...this.props.user,\n    avatar: '',\n  });\n\n  getField = (key: string, value: string, user: IUser) => {\n    const { nickname } = user;\n\n    switch (key) {\n      case 'avatar':\n        return (\n          <div>\n            <div style={{ display: 'flex' }}>\n              <Input\n                value={value}\n                onChange={this.onChange(key)}\n              />\n              <Button\n                onClick={this.clearAvatar}\n                disabled={!value}\n              >\n                <ClearOutlined/>\n              </Button>\n            </div>\n            <Avatar\n              avatar={value}\n              nickname={nickname}\n              size={128}\n              style={{ margin: '8px auto', display: 'block' }}\n            />\n          </div>\n        );\n\n      // Don't display UID and lastOnline editor\n      case 'uid':\n      case 'lastOnline':\n        return false;\n\n      default:\n        return (\n          <Input\n            defaultValue={value}\n            onChange={this.onChange(key)}\n          />\n        )\n    }\n  };\n\n  render = () => {\n    const { user, loading } = this.props;\n\n    return (\n      <div className=\"settings\">\n        <Loader loading={loading}/>\n        {Object\n          .keys(defaultUser)\n          .map((key: string) => {\n            // @ts-ignore\n            const field = this.getField(key, `${user[key]}`, user);\n            return field && (\n              <Card\n                key={key}\n                title={key.toUpperCase()}\n              >\n                {field}\n              </Card>\n            )\n          })\n        }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: IState, props: ISettingsProps) => {\n  const { loading, users } = state;\n  const uid = new URLSearchParams(props.match.params).get('uid') || state.uid || '0';\n\n  return {\n    loading,\n    user: users[uid] || {\n      ...defaultUser,\n      uid,\n    }\n  };\n};\n\nexport default connect(mapStateToProps)(Settings);\n","import { ConnectedComponent } from 'react-redux';\n\nimport Chat from '../components/Chat/index';\nimport Settings from '../components/Settings';\nimport Logout from '../components/Logout';\n\nexport interface IRoute {\n  path: string;\n  component: ConnectedComponent<any, any>;\n  exact?: boolean;\n}\n\nconst routes: IRoute[] = [\n  {\n    path: '/text-roleplay/chat',\n    component: Chat,\n  },\n  {\n    path: '/text-roleplay/:uid/settings',\n    component: Settings,\n    exact: true,\n  },\n  {\n    path: '/text-roleplay/settings',\n    component: Settings,\n    exact: true,\n  },\n  {\n    path: '/text-roleplay/logout',\n    component: Logout,\n  },\n];\n\nexport default routes;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Avatar } from 'antd';\n\nimport actions from '../../actions';\n\nconst byeLink = 'https://cdn.lowgif.com/full/fc3d7d9abd06a92e-hi-bear-gifs-get-the-best-gif-on-giphy.gif';\n\nconst Logout = () => {\n  return (\n    <div>\n      <Avatar\n        src={byeLink}\n        size={256}\n        style={{ margin: '0 auto', display: 'block' }}\n      />\n      <br/>\n      <br/>\n      <Button\n        type=\"primary\"\n        size=\"large\"\n        onClick={() => actions.logout({ })}\n        style={{ width: '100%' }}\n      >\n        Logout\n      </Button>\n    </div>\n  )\n};\n\nexport default connect()(Logout);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Form,\n  Input,\n  Button,\n} from 'antd';\n\nimport actions from '../../actions';\n\nconst Login = () => {\n  return (\n    <Form\n      onFinish={(values) => actions.login(values)}\n    >\n      <Form.Item\n        label=\"Email\"\n        name=\"email\"\n        rules={[{ required: true, message: 'Please input your email!' }]}\n      >\n        <Input/>\n      </Form.Item>\n      <Form.Item\n        label=\"Password\"\n        name=\"password\"\n        rules={[{ required: true, message: 'Please input your password!' }]}\n      >\n        <Input.Password/>\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Login\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default connect()(Login);\n","import React from 'react';\nimport {\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport routes, { IRoute } from '../../configs/routes';\nimport Login from '../Login';\nimport { IState } from \"../../reducers\";\n\ninterface IRouterProps {\n  isLoggedIn: boolean;\n}\n\nfunction Router(props: IRouterProps) {\n  if (!props.isLoggedIn) {\n    return (\n      <Switch>\n        <Route\n          path=\"*\"\n          component={Login}\n        />\n      </Switch>\n    )\n  }\n\n  return (\n    <Switch>\n      {\n        routes.map((value: IRoute) =>\n          <Route\n            key={value.path}\n            path={value.path}\n            component={value.component}\n            exact={value.exact || false}\n          />\n        )\n      }\n      <Redirect to=\"/text-roleplay/chat\"/>\n    </Switch>\n  );\n}\n\nexport default connect((state: IState) => ({ isLoggedIn: state.isLoggedIn }))(Router);\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'antd/dist/antd.css';\n\nimport Menu from './components/Menu';\nimport Router from './components/Router';\n\nimport './App.css';\nimport { listenForActivity } from './helpers/utils';\n\nfunction App() {\n  listenForActivity();\n\n  return (\n    <BrowserRouter>\n      <Menu/>\n      <div className=\"app\">\n        <Router/>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import {\n  initializeApp,\n  auth as fbAuth,\n  database as fbDatabase\n} from 'firebase';\n\nimport firebaseConfig from '../configs/firebase.json';\nimport actions from '../actions';\n\nconst firebase = initializeApp(firebaseConfig);\nconst auth = fbAuth();\nconst database = fbDatabase();\n\nauth.onAuthStateChanged((user) => {\n  if (user) {\n    actions.loginSuccess({ user });\n    actions.getUser({ uid: user.uid });\n  } else {\n    actions.logout({});\n  }\n});\n\nexport {\n  auth,\n  database,\n  firebase,\n}\n","import { takeLatest } from 'redux-saga/effects';\nimport { AnyAction } from 'redux';\n\nimport { auth, database } from '../helpers/firebase';\nimport actions, { IPayload } from '../actions/index';\nimport { formatMessage } from \"../helpers/utils\";\n\nfunction* login(action: AnyAction) {\n  const { email, password } = action;\n  try {\n    const user = yield auth.signInWithEmailAndPassword(email, password);\n    actions.loginSuccess({ user });\n    localStorage.setItem('user', JSON.stringify(user.user));\n    localStorage.setItem('uid', user.user.uid);\n  } catch (error) {\n    console.error(error);\n    if (error.code === 'auth/user-not-found') {\n      const user = yield auth.createUserWithEmailAndPassword(email, password);\n      actions.loginSuccess({ user });\n      localStorage.setItem('user', JSON.stringify(user.user));\n      localStorage.setItem('uid', user.uid);\n    } else {\n      actions.loginFail({ error });\n    }\n  }\n}\n\nfunction* logout() {\n  localStorage.removeItem('user');\n  localStorage.removeItem('uid');\n  localStorage.removeItem('loggedIn');\n  yield auth.signOut();\n}\n\nfunction* setUser(payload: IPayload) {\n  const { uid, user } = payload;\n\n  try {\n    yield database\n      .ref('users')\n      .child(uid)\n      .set({\n        ...user,\n        uid,\n      });\n\n    actions.setUserSuccess({});\n    actions.getUser({ uid });\n  } catch (error) {\n    console.error(error);\n    actions.setUserSuccess({ error });\n  }\n}\n\nfunction* sendMessage(payload: IPayload) {\n  const { uid, message } = payload;\n  const time = new Date().getTime();\n\n  try {\n    yield database\n      .ref('messages')\n      .child(`${time}`)\n      .set(formatMessage({\n        time,\n        author: uid,\n        body: `${message} `,\n      }));\n    localStorage.setItem('message', '');\n    actions.sendMessageSuccess({});\n  } catch (error) {\n    console.error(error);\n    actions.sendMessageFail({ error });\n  }\n}\n\nfunction subscribe() {\n  database\n    .ref('messages')\n    .orderByKey()\n    .limitToLast(1)\n    .on('value', (rawMessages) => {\n      const messages = Object.values(rawMessages.val() || {});\n      actions.getMessagesSuccess({\n        messages,\n        concat: true\n      });\n    });\n}\n\nfunction unsubscribe() {\n  database.ref('messages').off();\n}\n\nfunction* getMessages() {\n  const rawMessages = yield database\n    .ref('messages')\n    .orderByKey()\n    .limitToLast(30)\n    .once('value');\n\n  const messages = Object.values(rawMessages.val() || {});\n  actions.getMessagesSuccess({ messages });\n}\n\nfunction* getMoreMessages(payload: IPayload) {\n  const { firstMessage } = payload;\n\n  const rawMessages = yield database\n    .ref('messages')\n    .orderByKey()\n    .endAt(`${firstMessage.time}`)\n    .limitToLast(5)\n    .once('value');\n\n  const messages = Object.values(rawMessages.val() || {});\n  actions.getMessagesSuccess({ messages, concat: true });\n}\n\nconst requestedUsers: { [key: string]: true } = {};\n\nfunction getUser(payload: IPayload) {\n  const { uid } = payload;\n\n  if (requestedUsers[uid]) return;\n  requestedUsers[uid] = true;\n  database\n    .ref('users')\n    .child(uid)\n    .on('value', (rawUser) => {\n      const user = rawUser.val() || {};\n      actions.getUserSuccess({ user });\n    });\n}\n\nfunction* updateLastOnline() {\n  const uid = localStorage.getItem('uid');\n  if (!uid || uid === 'undefined') return;\n  const time = new Date().getTime();\n\n  localStorage.setItem('lastActivity', `${time}`);\n  yield database\n    .ref('users')\n    .child(`${uid}`)\n    .child('lastOnline')\n    .set(time);\n}\n\nfunction uploadFile(payload: IPayload) {\n  const { file, uid } = payload;\n\n  const request = new XMLHttpRequest();\n  const formData = new FormData();\n\n  formData.append('image', file);\n\n  request.open('POST', 'https://api.imgur.com/3/image/');\n  request.setRequestHeader('Authorization', `Client-ID ea2c833b74d4583`);\n  request.onreadystatechange = () => {\n    if (request.status === 200 && request.readyState === 4) {\n      let res = JSON.parse(request.responseText);\n\n      actions.sendMessage({\n        uid,\n        message: res.data.link,\n      });\n    }\n  };\n\n  request.send(formData);\n}\n\nexport default function* watchForActions() {\n  yield takeLatest('LOGIN', login);\n  yield takeLatest('LOGOUT', logout);\n  yield takeLatest('GET_USER', getUser);\n  yield takeLatest('SET_USER', setUser);\n  yield takeLatest('SEND_MESSAGE', sendMessage);\n  yield takeLatest('GET_MESSAGES', getMessages);\n  yield takeLatest('GET_MORE_MESSAGES', getMoreMessages);\n  yield takeLatest('SUBSCRIBE', subscribe);\n  yield takeLatest('UPDATE_LAST_ONLINE', updateLastOnline);\n  yield takeLatest('UNSUBSCRIBE', unsubscribe);\n  yield takeLatest('UPLOAD_FILE', uploadFile);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport saga from './sagas';\nimport store, { sagaMiddleware } from './helpers/store';\nimport * as serviceWorker from './serviceWorker';\n\nsagaMiddleware.run(saga);\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}