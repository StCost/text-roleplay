{"version":3,"sources":["reducers/index.ts","helpers/store.tsx","helpers/utils.tsx","actions/index.tsx","components/Avatar/index.tsx","components/Chat/Message.tsx","components/Chat/index.tsx","components/Settings/index.tsx","configs/routes.tsx","components/Logout/index.tsx","components/Menu/index.tsx","components/Login/index.tsx","components/Router/index.tsx","App.tsx","helpers/firebase.tsx","sagas/index.tsx","serviceWorker.ts","index.tsx"],"names":["user","JSON","parse","localStorage","getItem","initialState","isLoggedIn","settings","loading","messages","users","defaultSettings","nickname","avatar","uid","reducer","state","action","type","concat","sort","a","b","parseInt","time","filter","item","pos","self","findIndex","_i","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","composeWithDevTools","applyMiddleware","mapLoggedToProps","colorFromString","str","hash","i","length","charCodeAt","color","toString","substr","dispatch","createAction","payload","createAsyncAction","typeName","toLowerCase","replace","m","toUpperCase","actions","logout","Avatar","props","style","rest","src","backgroundColor","dd","Message","message","author","body","date","Date","messageTime","getHours","getMinutes","getSeconds","map","join","messageDate","getDate","getMonth","getFullYear","title","to","className","key","extra","Chat","sending","componentDidMount","getMessages","subscribe","setState","componentWillUnmount","unsubscribe","componentDidUpdate","prevProps","setItem","forEach","getUser","onChangeMessage","event","target","value","onKeyDown","shiftKey","preventDefault","onSendMessage","sendMessage","notify","error","getTime","getMoreMessages","firstMessage","onScroll","scrollTop","render","spinning","TextArea","placeholder","autoSize","minRows","maxRows","onChange","SendOutlined","onClick","Component","connect","Settings","getSettings","field","getNewSettings","newSettings","Object","entries","onSubmit","setSettings","getField","display","defaultValue","disabled","ClearOutlined","size","margin","React","routes","label","path","component","width","withRouter","mode","selectedKeys","location","pathname","Item","Fragment","onFinish","values","login","name","rules","required","Password","htmlType","Login","App","firebase","_firebase","initializeApp","firebaseConfig","auth","database","onAuthStateChanged","loginSuccess","watchForActions","email","password","signInWithEmailAndPassword","stringify","console","code","createUserWithEmailAndPassword","loginFail","removeItem","signOut","ref","child","once","rawSettings","val","getSettingsSuccess","getSettingsFail","set","setSettingsSuccess","setSettingsFail","sendMessageSuccess","sendMessageFail","orderByKey","limitToLast","on","rawMessages","getMessagesSuccess","off","endAt","requestedUsers","log","rawUser","getUserSuccess","takeEvery","Boolean","window","hostname","match","run","saga","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.583f7d02.chunk.js","sourcesContent":["import { User } from 'firebase';\n\nexport interface IAction {\n  type: string;\n\n  [key: string]: any; // Payload could be any type or size\n}\n\nexport interface IMessage {\n  author: string;\n  time: string;\n  body: string;\n}\n\nexport interface IUsers {\n  [key: string]: ISettings;\n}\n\nexport interface IState {\n  user: User | null;\n  isLoggedIn: boolean;\n  settings: ISettings | false;\n  loading: boolean;\n  messages: IMessage[];\n  users: IUsers;\n}\n\nconst user = JSON.parse(localStorage.getItem('user') || 'null');\nexport const initialState: IState = {\n  user,\n  isLoggedIn: user !== null,\n  settings: false,\n  loading: false,\n  messages: [],\n  users: {},\n};\n\nexport interface ISettings {\n  nickname: string;\n  avatar: string;\n  uid: string,\n}\n\nexport const defaultSettings = {\n  nickname: '',\n  avatar: '',\n  uid: '',\n};\n\nconst reducer = (state = initialState, action: IAction) => {\n  switch (action.type) {\n    case 'LOGIN':\n    case 'GET_MESSAGES':\n    case 'GET_MORE_MESSAGES':\n    case 'SEND_MESSAGE':\n    case 'GET_SETTINGS':\n    case 'SET_SETTINGS': {\n      return {\n        ...state,\n        loading: true,\n      }\n    }\n    case 'LOGIN_FAIL':\n    case 'GET_MESSAGES_FAIL':\n    case 'GET_MORE_MESSAGES_SUCCESS':\n    case 'GET_MORE_MESSAGES_FAIL':\n    case 'SEND_MESSAGE_FAIL':\n    case 'GET_SETTINGS_FAIL':\n    case 'SET_SETTINGS_SUCCESS':\n    case 'SET_SETTINGS_FAIL': {\n      return {\n        ...state,\n        loading: false,\n      }\n    }\n    case 'LOGIN_SUCCESS': {\n      return {\n        ...state,\n        user: action.user,\n        isLoggedIn: action.user !== null,\n      }\n    }\n    case 'LOGOUT': {\n      return {\n        ...state,\n        user: null,\n        isLoggedIn: false,\n      }\n    }\n    case 'GET_MESSAGES_SUCCESS': {\n      const messages = action.concat\n        ? [...state.messages, ...action.messages]\n        : action.messages;\n\n      return {\n        ...state,\n        messages: messages\n          .sort((a: IMessage, b: IMessage) => parseInt(b.time) - parseInt(a.time))\n          .filter((item: IMessage, pos: number, self: IMessage[]) =>\n            self.findIndex((_i: IMessage) => _i.time === item.time) === pos\n          ),\n        loading: false,\n      }\n    }\n    case 'GET_SETTINGS_SUCCESS': {\n      return {\n        ...state,\n        settings: action.settings || defaultSettings,\n        loading: false,\n      }\n    }\n    case 'GET_USER_SUCCESS': {\n      return {\n        ...state,\n        users: {\n          ...state.users,\n          [action.user.uid]: action.user,\n        },\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { initialState } from '../reducers/index';\nimport reducers from '../reducers/index'\n\nexport const sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  reducers,\n  initialState,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nexport default store;\n","import { IState } from '../reducers/index';\n\nexport const camelize = (str: string) => {\n  return str\n    .toLowerCase()\n    .replace(/_./g, (m) => m.toUpperCase())\n    .replace(/_/g, '')\n};\n\nexport const mapLoggedToProps = (state: IState) => {\n  const { isLoggedIn } = state;\n  return { isLoggedIn };\n};\n\nexport const colorFromString = (str: string) => {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = '#';\n  for (let i = 0; i < 3; i++) {\n    let value = (hash >> (i * 8)) & 0xFF;\n    color += ('00' + value.toString(16)).substr(-2);\n  }\n\n  return color;\n};\n","import store from '../helpers/store';\nimport { camelize } from '../helpers/utils';\n\nconst dispatch = store.dispatch;\n\nexport interface IPayload {\n  [key: string]: any;\n}\n\ninterface IActions {\n  [key: string]: (payload: IPayload) => void;\n}\n\nconst createAction =\n  (type: string) =>\n    (payload?: IPayload) =>\n      dispatch({ type, ...payload });\n\nconst createAsyncAction = (type: string) => {\n  const typeName = camelize(type);\n  return {\n    [typeName]: createAction(type),\n    [`${typeName}Success`]: createAction(`${type}_SUCCESS`),\n    [`${typeName}Fail`]: createAction(`${type}_FAIL`),\n  }\n};\n\nconst actions: IActions = {\n  ...createAsyncAction('LOGIN'),\n  ...createAsyncAction('GET_USER'),\n  ...createAsyncAction('GET_MESSAGES'),\n  ...createAsyncAction('GET_MORE_MESSAGES'),\n  ...createAsyncAction('GET_SETTINGS'),\n  ...createAsyncAction('SET_SETTINGS'),\n  ...createAsyncAction('SEND_MESSAGE'),\n  ...createAsyncAction('SUBSCRIBE'),\n  ...createAsyncAction('UNSUBSCRIBE'),\n  logout: createAction('LOGOUT'),\n};\n\nexport default actions;\n","import React from 'react';\nimport { Avatar as AntdAvatar } from 'antd';\nimport { AvatarProps } from 'antd/es/avatar';\nimport { colorFromString } from \"../../helpers/utils\";\n\ninterface IAvatarProps extends AvatarProps {\n  avatar: string;\n  nickname: string;\n}\n\nconst Avatar = (props: IAvatarProps) => {\n  const { avatar, nickname, style, ...rest } = props;\n\n  return (\n    <AntdAvatar\n      src={avatar}\n      style={{ ...style, backgroundColor: avatar ? 'transparent' : colorFromString(nickname) }}\n      {...rest}\n    >\n      {nickname}\n    </AntdAvatar>\n  )\n};\n\nexport default Avatar;\n","import React from 'react';\nimport { Card, Tooltip } from 'antd';\nimport { Link } from 'react-router-dom';\n\nimport { IMessage, ISettings } from '../../reducers';\nimport Avatar from '../Avatar';\n\ninterface IMessageProps {\n  message: IMessage,\n  user: ISettings,\n}\n\n// Make double digit (dd)\nconst dd = (str: number) => `${str}`.length === 1\n  ? `0${str}`\n  : str;\n\nconst Message = (props: IMessageProps) => {\n  const {\n    message: {\n      author,\n      time,\n      body,\n    },\n    user\n  } = props;\n\n  const date = new Date(time);\n  const messageTime = [date.getHours(), date.getMinutes(), date.getSeconds()].map(dd).join(':');\n  const messageDate = [date.getDate(), date.getMonth() + 1, date.getFullYear()].map(dd).join('.');\n\n  const title = user && (\n    <Link to={`./user/${user.uid}`}>\n      <div className=\"chat-message__title\">\n        <Avatar\n          avatar={user.avatar}\n          nickname={user.nickname}\n        />\n        <div className=\"chat-message__nickname\">\n          {user.nickname}\n        </div>\n      </div>\n    </Link>\n  );\n\n  return (\n    <Card\n      className=\"chat-message\"\n      title={title}\n      key={time}\n      extra={(\n        <Tooltip title={messageDate}>\n          <div className=\"chat-time\">{messageTime}</div>\n        </Tooltip>\n      )}\n    >\n      {body}\n    </Card>\n  );\n};\n\nexport default Message;\n","import React, { ChangeEvent, Component, KeyboardEvent } from 'react';\nimport { connect } from 'react-redux';\nimport { User } from 'firebase';\nimport { SendOutlined } from '@ant-design/icons';\nimport {\n  Card,\n  Input,\n  message as notify,\n  Spin,\n} from 'antd';\n\nimport './chat.scss';\nimport actions from '../../actions';\nimport { IMessage, ISettings, IState, IUsers } from '../../reducers';\nimport Message from './Message';\n\ninterface IChatProps {\n  messages: IMessage[],\n  user: User | null,\n  settings: ISettings | false,\n  loading: boolean,\n  users: IUsers;\n}\n\ninterface IChatState {\n  message: string;\n  sending: boolean;\n}\n\nclass Chat extends Component<IChatProps, IChatState> {\n  state = {\n    message: '',\n    sending: false,\n  };\n\n  componentDidMount = () => {\n    actions.getMessages({});\n    actions.subscribe({});\n    this.setState({ message: localStorage.getItem('message') || '' });\n  };\n\n  componentWillUnmount = () => {\n    actions.unsubscribe({});\n  };\n\n  componentDidUpdate = (prevProps: IChatProps) => {\n    const { messages, users } = this.props;\n\n    if (this.state.sending && prevProps.messages !== messages) {\n      localStorage.setItem('message', '');\n      this.setState({\n        message: '',\n        sending: false,\n      });\n    }\n\n    messages.forEach((m: IMessage) => {\n      if (!users[m.author]) {\n        actions.getUser({ uid: m.author });\n      }\n    });\n  };\n\n  onChangeMessage = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const message = event.target.value;\n    localStorage.setItem('message', message);\n    this.setState({ message });\n  };\n\n  onKeyDown = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n\n      this.onSendMessage();\n    }\n  };\n\n  onSendMessage = () => {\n    const { message } = this.state;\n    const { settings, user, loading } = this.props;\n\n    if (loading) {\n      return;\n    }\n\n    if (!user || !settings) {\n      notify.error('Not logged in. How are you even here? Contact administration');\n      return;\n    }\n\n    if (!settings.nickname) {\n      notify.error('User name is not defined. Go to settings and set it');\n      return;\n    }\n\n    if (!message) {\n      notify.error('Message is empty');\n      return;\n    }\n\n    this.setState({ sending: true });\n    actions.sendMessage({\n      uid: user.uid,\n      message,\n    });\n  };\n\n  getTime = (time: string) => {\n    const date = new Date(time);\n    return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`\n  };\n\n  getMoreMessages = () => {\n    actions.getMoreMessages({ firstMessage: this.props.messages[this.props.messages.length - 1] })\n  };\n\n  onScroll = (event: any) => {\n    if (event.target.scrollTop <= 50) {\n      this.getMoreMessages();\n    }\n  };\n\n  render = () => {\n    const { messages, loading, users } = this.props;\n\n    return (\n      <Spin spinning={loading}>\n        <div className={`chat-wrapper`}>\n          <div\n            className=\"chat-body\"\n            onScroll={this.onScroll}\n          >\n            {messages.map((m: IMessage) => (\n              <Message\n                key={m.time}\n                message={m}\n                user={users[m.author]}\n              />\n            ))}\n          </div>\n          <div className=\"chat-controls\">\n            <Input.TextArea\n              placeholder=\"Enter message\"\n              autoSize={{ minRows: 1, maxRows: 10 }}\n              onChange={this.onChangeMessage}\n              onKeyDown={this.onKeyDown}\n              value={this.state.message}\n            />\n            <SendOutlined\n              onClick={this.onSendMessage}\n            />\n          </div>\n        </div>\n      </Spin>\n    )\n  }\n}\n\nconst mapStateToProps = (state: IState) => {\n  const { messages, user, settings, loading, users, } = state;\n\n  return {\n    messages,\n    user,\n    settings,\n    loading,\n    users,\n  };\n};\n\nexport default connect(mapStateToProps)(Chat);\n","import React, { ChangeEvent } from 'react';\nimport { connect } from 'react-redux';\nimport { User } from 'firebase';\nimport {\n  Card,\n  Input,\n  Button,\n  Empty,\n  Spin,\n} from 'antd';\n\nimport { ClearOutlined } from '@ant-design/icons';\n\nimport actions from '../../actions';\nimport { IState, ISettings, defaultSettings } from '../../reducers';\nimport Avatar from '../Avatar';\n\ninterface ISettingsProps {\n  settings: ISettings | false;\n  loading: boolean;\n  user: User | null;\n}\n\nexport class Settings extends React.Component<ISettingsProps, ISettings> {\n  state = defaultSettings;\n\n  componentDidMount = () => {\n    const { user } = this.props;\n    if (user) {\n      actions.getSettings({ uid: user.uid });\n    }\n  };\n\n  onChange = (field: string) => (event: ChangeEvent<HTMLInputElement>) =>\n    // @ts-ignore\n    this.setState({ [field]: event.target.value });\n\n  getNewSettings = () => {\n    const { settings } = this.props;\n\n    const newSettings = {};\n    Object.entries(settings).forEach(([key, value]) => {\n      // @ts-ignore\n      newSettings[key] = this.state[key] || value;\n    });\n    return newSettings;\n  };\n\n  onSubmit = () => {\n    this.setSettings(this.getNewSettings());\n  };\n\n  setSettings = (newSettings: {}) => {\n    const { user } = this.props;\n    if (user) {\n      actions.setSettings({\n        uid: user.uid,\n        settings: newSettings,\n      });\n    }\n  };\n\n  getField = (key: string, value: string) => {\n    const { loading, settings } = this.props;\n    const { avatar, nickname } = this.state;\n\n    switch (key) {\n      case 'avatar':\n        return (\n          <div>\n            <div style={{ display: 'flex' }}>\n              <Input\n                defaultValue={avatar || value}\n                onChange={this.onChange(key)}\n                disabled={loading}\n              />\n              <Button\n                onClick={() => this.setSettings({\n                  ...this.getNewSettings(),\n                  avatar: '',\n                })}\n                disabled={!(avatar || value)}\n              >\n                <ClearOutlined/>\n              </Button>\n            </div>\n            <Avatar\n              avatar={avatar || value}\n              nickname={nickname || (settings && settings.nickname) || ''}\n              size={128}\n              style={{ margin: '8px auto', display: 'block' }}\n            />\n          </div>\n        );\n\n      // Don't display UID editor\n      case 'uid':\n        return false;\n\n      default:\n        return (\n          <Input\n            defaultValue={value}\n            onChange={this.onChange(key)}\n            disabled={loading}\n          />\n        )\n    }\n  };\n\n  render = () => {\n    const { settings, loading } = this.props;\n\n    if (!settings) {\n      return (\n        <Empty/>\n      )\n    }\n\n    return (\n      <div>\n        <Spin spinning={loading}>\n          {Object\n            .entries(settings)\n            .map(([key, value]) => {\n              const field = this.getField(key, value);\n              return field && (\n                <Card\n                  key={key}\n                  title={key.toUpperCase()}\n                >\n                  {field}\n                </Card>\n              )\n            })\n          }\n        </Spin>\n\n        <Button\n          onClick={this.onSubmit}\n          disabled={loading}\n        >\n          Submit\n        </Button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: IState) => {\n  const { settings, loading, user } = state;\n  return { settings, loading, user };\n};\n\nexport default connect(mapStateToProps)(Settings);\n","import { ConnectedComponent } from 'react-redux';\n\nimport Chat from '../components/Chat/index';\nimport Settings from '../components/Settings';\nimport Logout from '../components/Logout';\n\nexport interface IRoute {\n  label: string;\n  path: string;\n  component: ConnectedComponent<any, any>;\n}\n\nconst routes: IRoute[] = [\n  {\n    label: 'Chat',\n    path: '/text-roleplay/chat',\n    component: Chat,\n  },\n  {\n    label: 'Settings',\n    path: '/text-roleplay/settings',\n    component: Settings,\n  },\n  {\n    label: 'Logout',\n    path: '/text-roleplay/logout',\n    component: Logout,\n  },\n];\n\nexport default routes;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Avatar } from 'antd';\n\nimport actions from '../../actions';\n\nconst byeLink = 'https://cdn.lowgif.com/full/fc3d7d9abd06a92e-hi-bear-gifs-get-the-best-gif-on-giphy.gif';\n\nconst Logout = () => {\n  return (\n    <div>\n      <Avatar\n        src={byeLink}\n        size={256}\n        style={{ margin: '0 auto', display: 'block' }}\n      />\n      <br/>\n      <br/>\n      <Button\n        type=\"primary\"\n        size=\"large\"\n        onClick={() => actions.logout({})}\n        style={{ width: '100%' }}\n      >\n        Logout\n      </Button>\n    </div>\n  )\n};\n\nexport default connect()(Logout);\n","import React from 'react';\nimport { Menu as AntdMenu } from 'antd';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport routes, { IRoute } from '../../configs/routes';\nimport { mapLoggedToProps } from '../../helpers/utils';\n\ninterface IMenuProps extends RouteComponentProps {\n  isLoggedIn: boolean;\n}\n\nfunction Menu(props: IMenuProps) {\n  if (!props.isLoggedIn) {\n    return <React.Fragment/>;\n  }\n\n  return (\n    <AntdMenu\n      style={{ width: 256 }}\n      mode=\"inline\"\n      selectedKeys={[props.location.pathname]}\n    >\n      {routes.map((value: IRoute) => (\n        <AntdMenu.Item\n          key={value.path}\n          disabled={value.path === props.location.pathname}\n        >\n          <Link to={value.path}>\n            {value.label}\n          </Link>\n        </AntdMenu.Item>\n      ))}\n    </AntdMenu>\n  );\n}\n\nexport default connect(mapLoggedToProps)(withRouter(Menu));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Form,\n  Input,\n  Button,\n} from 'antd';\nimport { Redirect, RouteComponentProps } from 'react-router-dom';\n\nimport actions from '../../actions';\nimport { mapLoggedToProps } from '../../helpers/utils';\n\ninterface ILoginProps extends RouteComponentProps {\n  isLoggedIn: boolean;\n}\n\nconst Login = (props: ILoginProps) => {\n  if (props.isLoggedIn) {\n    return (\n      <Redirect to=\"/chat\"/>\n    )\n  }\n\n  return (\n    <Form\n      onFinish={(values) => actions.login(values)}\n    >\n      <Form.Item\n        label=\"Email\"\n        name=\"email\"\n        rules={[{ required: true, message: 'Please input your email!' }]}\n      >\n        <Input/>\n      </Form.Item>\n      <Form.Item\n        label=\"Password\"\n        name=\"password\"\n        rules={[{ required: true, message: 'Please input your password!' }]}\n      >\n        <Input.Password/>\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Login\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default connect(mapLoggedToProps)(Login);\n","import React from 'react';\nimport {\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Button, Empty, Card } from 'antd';\n\nimport routes, { IRoute } from '../../configs/routes';\nimport { mapLoggedToProps } from '../../helpers/utils';\nimport Login from \"../Login\";\n\ninterface IRouterProps {\n  isLoggedIn: boolean;\n}\n\nfunction Router(props: IRouterProps) {\n  if (!props.isLoggedIn) {\n    return (\n      <Switch>\n        <Route\n          path=\"*\"\n          component={Login}\n        />\n      </Switch>\n    )\n  }\n\n  return (\n    <Switch>\n      {\n        routes.map((value: IRoute) =>\n          <Route\n            key={value.path}\n            path={value.path}\n            component={value.component}\n          />\n        )\n      }\n      <Redirect to=\"/text-roleplay/chat\"/>\n    </Switch>\n  );\n}\n\nexport default connect(mapLoggedToProps)(Router);\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Menu from './components/Menu';\nimport Router from './components/Router';\n\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Menu/>\n      <div className=\"app\">\n        <Router/>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import _firebase from 'firebase';\n\nimport firebaseConfig from '../configs/firebase.json';\nimport actions from '../actions';\n\nconst firebase = _firebase.initializeApp(firebaseConfig);\nconst auth = firebase.auth();\nconst database = firebase.database();\n\nauth.onAuthStateChanged((user) => {\n  if (user) {\n    actions.loginSuccess({ user });\n    actions.getSettings({ uid: user.uid });\n  } else {\n    actions.logout({});\n  }\n});\n\nexport {\n  auth,\n  database,\n  firebase,\n}\n","import { takeEvery } from 'redux-saga/effects';\nimport { AnyAction } from 'redux';\n\nimport { auth, database } from '../helpers/firebase';\nimport actions, { IPayload } from '../actions/index';\n\nfunction* login(action: AnyAction) {\n  const { email, password } = action;\n  try {\n    const user = yield auth.signInWithEmailAndPassword(email, password);\n    actions.loginSuccess({ user });\n    localStorage.setItem('user', JSON.stringify(user.user));\n  } catch (error) {\n    console.error(error);\n    if (error.code === 'auth/user-not-found') {\n      const user = auth.createUserWithEmailAndPassword(email, password);\n      actions.loginSuccess({ user });\n      localStorage.setItem('user', JSON.stringify(user));\n    } else {\n      actions.loginFail({ error });\n    }\n  }\n}\n\nfunction* logout() {\n  localStorage.removeItem('user');\n  localStorage.setItem('loggedIn', 'false');\n  yield auth.signOut();\n}\n\nfunction* getSettings(payload: IPayload) {\n  const { uid } = payload;\n\n  try {\n    const rawSettings = yield database\n      .ref('settings')\n      .child(uid)\n      .once('value');\n\n    const settings = rawSettings.val();\n    actions.getSettingsSuccess({ settings });\n  } catch (error) {\n    console.error(error);\n    actions.getSettingsFail({ error });\n  }\n}\n\nfunction* setSettings(payload: IPayload) {\n  const { uid, settings } = payload;\n\n  try {\n    yield database\n      .ref('settings')\n      .child(uid)\n      .set({\n        ...settings,\n        uid,\n      });\n\n    actions.setSettingsSuccess({});\n    actions.getSettings({ uid });\n  } catch (error) {\n    console.error(error);\n    actions.setSettingsFail({ error });\n  }\n}\n\nfunction* sendMessage(payload: IPayload) {\n  const { uid, message } = payload;\n  const time = new Date().getTime();\n\n  try {\n    yield database\n      .ref('messages')\n      .child(`${time}`)\n      .set({\n        time,\n        author: uid,\n        body: message,\n      });\n    localStorage.setItem('message', '');\n    actions.sendMessageSuccess({});\n  } catch (error) {\n    console.error(error);\n    actions.sendMessageFail({ error });\n  }\n}\n\nfunction subscribe() {\n  database\n    .ref('messages')\n    .orderByKey()\n    .limitToLast(1)\n    .on('value', (rawMessages) => {\n      const messages = Object.values(rawMessages.val() || {});\n      actions.getMessagesSuccess({\n        messages,\n        concat: true\n      });\n    });\n}\n\nfunction unsubscribe() {\n  database.ref('messages').off();\n}\n\nfunction* getMessages() {\n  const rawMessages = yield database\n    .ref('messages')\n    .orderByKey()\n    .limitToLast(30)\n    .once('value');\n\n  const messages = Object.values(rawMessages.val() || {});\n  actions.getMessagesSuccess({ messages });\n}\n\nfunction* getMoreMessages(payload: IPayload) {\n  const { firstMessage } = payload;\n\n  const rawMessages = yield database\n    .ref('messages')\n    .orderByKey()\n    .endAt(`${firstMessage.time}`)\n    .limitToLast(5)\n    .once('value');\n\n  const messages = Object.values(rawMessages.val() || {});\n  actions.getMessagesSuccess({ messages, concat: true });\n}\n\nconst requestedUsers: {[key: string]: true} = {};\nfunction getUser(payload: IPayload) {\n  const { uid } = payload;\n\n  if (requestedUsers[uid]) return;\n  requestedUsers[uid] = true;\n  console.log('sub', uid, new Date().getTime())\n  database\n    .ref('settings')\n    .child(uid)\n    .on('value', (rawUser) => {\n      const user = rawUser.val() || {};\n      actions.getUserSuccess({ user });\n    });\n}\n\nexport default function* watchForActions() {\n  yield takeEvery('LOGIN', login);\n  yield takeEvery('LOGOUT', logout);\n  yield takeEvery('GET_SETTINGS', getSettings);\n  yield takeEvery('GET_USER', getUser);\n  yield takeEvery('SET_SETTINGS', setSettings);\n  yield takeEvery('SEND_MESSAGE', sendMessage);\n  yield takeEvery('GET_MESSAGES', getMessages);\n  yield takeEvery('GET_MORE_MESSAGES', getMoreMessages);\n  yield takeEvery('SUBSCRIBE', subscribe);\n  yield takeEvery('UNSUBSCRIBE', unsubscribe);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport saga from './sagas';\nimport store, { sagaMiddleware } from './helpers/store';\nimport * as serviceWorker from './serviceWorker';\n\nsagaMiddleware.run(saga);\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}