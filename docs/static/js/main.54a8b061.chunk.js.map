{"version":3,"sources":["reducers/index.ts","helpers/store.tsx","helpers/utils.tsx","actions/index.tsx","components/Avatar/index.tsx","components/Chat/MessageBody.tsx","components/Chat/Message.tsx","components/Chat/index.tsx","components/Settings/index.tsx","configs/routes.tsx","components/Logout/index.tsx","components/Menu/index.tsx","components/Login/index.tsx","components/Router/index.tsx","App.tsx","helpers/firebase.tsx","sagas/index.tsx","serviceWorker.ts","index.tsx"],"names":["user","JSON","parse","localStorage","getItem","setItem","uid","initialState","isLoggedIn","settings","loading","messages","users","defaultSettings","nickname","avatar","lastOnline","reducer","state","action","type","concat","sort","a","b","time","filter","item","pos","self","findIndex","_i","sagaMiddleware","createSagaMiddleware","store","createStore","reducers","composeWithDevTools","applyMiddleware","colorFromString","str","hash","i","length","charCodeAt","color","toString","substr","isOnline","parseInt","Date","getTime","doubleDigit","date","getHours","getMinutes","getSeconds","map","join","getDate","getMonth","getFullYear","getFullTime","dispatch","createAction","payload","createAsyncAction","typeName","toLowerCase","replace","m","toUpperCase","actions","updateLastOnline","logout","Avatar","props","style","rest","src","backgroundColor","MessageBody","message","RegExp","test","alt","videoId","URL","searchParams","get","title","id","width","height","frameBorder","href","target","rel","Message","body","to","placement","className","key","extra","Chat","sending","componentDidMount","getMessages","subscribe","setState","componentWillUnmount","unsubscribe","componentDidUpdate","prevProps","forEach","author","getUser","onChangeMessage","event","value","onKeyDown","shiftKey","preventDefault","onSendMessage","sendMessage","notify","error","getMoreMessages","firstMessage","onScroll","currentTarget","scrollTop","uploadFile","file","indexOf","onPaste","e","clipboardData","files","onDrop","dataTransfer","items","getAsFile","render","spinning","TextArea","placeholder","autoSize","minRows","maxRows","onChange","SendOutlined","onClick","Component","connect","Settings","getSettings","field","getNewSettings","newSettings","Object","entries","onSubmit","setSettings","getField","display","defaultValue","disabled","ClearOutlined","size","margin","React","routes","label","path","component","withRouter","mode","selectedKeys","location","pathname","Item","onFinish","values","login","name","rules","required","Password","htmlType","Login","App","callback","eventName","document","addEventListener","listenForActivity","auth","initializeApp","firebaseConfig","fbAuth","database","fbDatabase","onAuthStateChanged","loginSuccess","watchForActions","email","password","signInWithEmailAndPassword","stringify","console","code","createUserWithEmailAndPassword","loginFail","removeItem","signOut","ref","child","once","rawSettings","val","getSettingsSuccess","getSettingsFail","set","setSettingsSuccess","setSettingsFail","sendMessageSuccess","sendMessageFail","orderByKey","limitToLast","on","rawMessages","getMessagesSuccess","off","endAt","requestedUsers","rawUser","getUserSuccess","request","XMLHttpRequest","formData","FormData","append","open","setRequestHeader","onreadystatechange","status","readyState","res","responseText","data","link","send","takeLatest","Boolean","window","hostname","match","run","saga","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.54a8b061.chunk.js","sourcesContent":["import { User } from 'firebase';\n\nexport interface IAction {\n  type: string;\n\n  [key: string]: any; // Payload could be any type or size\n}\n\nexport interface IMessage {\n  author: string;\n  time: number;\n  body: string;\n}\n\nexport interface IUsers {\n  [key: string]: ISettings;\n}\n\nexport interface IState {\n  user: User | null;\n  isLoggedIn: boolean;\n  settings: ISettings | false;\n  loading: boolean;\n  messages: IMessage[];\n  users: IUsers;\n}\n\nconst user = JSON.parse(localStorage.getItem('user') || 'null');\nif (user)\n  localStorage.setItem('uid', user.uid);\nexport const initialState: IState = {\n  user,\n  isLoggedIn: user !== null,\n  settings: false,\n  loading: false,\n  messages: [],\n  users: {},\n};\n\nexport interface ISettings {\n  nickname: string;\n  avatar: string;\n  uid: string,\n  lastOnline: number;\n}\n\nexport const defaultSettings = {\n  nickname: '',\n  avatar: '',\n  uid: '',\n  lastOnline: 0,\n};\n\nconst reducer = (state = initialState, action: IAction) => {\n  switch (action.type) {\n    case 'LOGIN':\n    case 'GET_MESSAGES':\n    case 'GET_MORE_MESSAGES':\n    case 'SEND_MESSAGE':\n    case 'GET_SETTINGS':\n    case 'UPLOAD_FILE':\n    case 'SET_SETTINGS': {\n      return {\n        ...state,\n        loading: true,\n      }\n    }\n    case 'LOGIN_FAIL':\n    case 'GET_MESSAGES_FAIL':\n    case 'GET_MORE_MESSAGES_SUCCESS':\n    case 'GET_MORE_MESSAGES_FAIL':\n    case 'SEND_MESSAGE_FAIL':\n    case 'GET_SETTINGS_FAIL':\n    case 'SET_SETTINGS_SUCCESS':\n    case 'SET_SETTINGS_FAIL': {\n      return {\n        ...state,\n        loading: false,\n      }\n    }\n    case 'LOGIN_SUCCESS': {\n      return {\n        ...state,\n        user: action.user,\n        isLoggedIn: action.user !== null,\n      }\n    }\n    case 'LOGOUT': {\n      return {\n        ...state,\n        user: null,\n        isLoggedIn: false,\n      }\n    }\n    case 'GET_MESSAGES_SUCCESS': {\n      const messages = action.concat\n        ? [...state.messages, ...action.messages]\n        : action.messages;\n\n      return {\n        ...state,\n        messages: messages\n          .sort((a: IMessage, b: IMessage) => b.time - a.time)\n          .filter((item: IMessage, pos: number, self: IMessage[]) =>\n            self.findIndex((_i: IMessage) => _i.time === item.time) === pos\n          ),\n        loading: false,\n      }\n    }\n    case 'GET_SETTINGS_SUCCESS': {\n      return {\n        ...state,\n        settings: action.settings || defaultSettings,\n        loading: false,\n      }\n    }\n    case 'GET_USER_SUCCESS': {\n      return {\n        ...state,\n        users: {\n          ...state.users,\n          [action.user.uid]: action.user,\n        },\n      }\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { initialState } from '../reducers';\nimport reducers from '../reducers'\n\nexport const sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  reducers,\n  initialState,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nexport default store;\n","import actions from '../actions';\n\nexport const camelize = (str: string) => {\n  return str\n    .toLowerCase()\n    .replace(/_./g, (m) => m.toUpperCase())\n    .replace(/_/g, '')\n};\n\nexport const colorFromString = (str: string) => {\n  let hash = 0;\n  for (let i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = '#';\n  for (let i = 0; i < 3; i++) {\n    let value = (hash >> (i * 8)) & 0xFF;\n    color += ('00' + value.toString(16)).substr(-2);\n  }\n\n  return color;\n};\n\nexport const isOnline = (time?: number) => {\n  const lastActivity = time || parseInt(localStorage.getItem('lastActivity') || '0');\n  return (lastActivity + 180000) > new Date().getTime();\n};\n\nexport const doubleDigit = (str: number) => `${str}`.length === 1\n  ? `0${str}`\n  : str;\n\nexport const getTime = (time: number) => {\n  const date = new Date(time);\n  return [date.getHours(), date.getMinutes(), date.getSeconds()].map(doubleDigit).join(':');\n};\n\nexport const getDate = (time: number) => {\n  const date = new Date(time);\n  return [date.getDate(), date.getMonth() + 1, date.getFullYear()].map(doubleDigit).join('.');\n};\n\nexport const getFullTime = (time: number) => {\n  const date = new Date(time);\n  const messageTime = [date.getHours(), date.getMinutes(), date.getSeconds()].map(doubleDigit).join(':');\n  const messageDate = [date.getDate(), date.getMonth() + 1, date.getFullYear()].map(doubleDigit).join('.');\n\n  return [messageTime, messageDate].join(' ');\n};\n\nexport const listenForActivity = () => {\n  const callback = () => {\n    if (!isOnline(parseInt(localStorage.getItem('lastActivity') || '0') - 60000))\n      actions.updateLastOnline({});\n  };\n\n  [\n    'mousedown',\n    'mousemove',\n    'keydown',\n    'scroll',\n    'touchstart'\n  ].forEach((eventName) => {\n    document.addEventListener(eventName, callback, true);\n  });\n  callback();\n};\n\nexport const isURL = (str: string) => {\n  const pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\n    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n    '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n    '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n  return !!pattern.test(str);\n};\n","import store from '../helpers/store';\nimport { camelize } from '../helpers/utils';\n\nconst dispatch = store.dispatch;\n\nexport interface IPayload {\n  [key: string]: any;\n}\n\ninterface IActions {\n  [key: string]: (payload: IPayload) => void;\n}\n\nconst createAction =\n  (type: string) =>\n    (payload?: IPayload) =>\n      dispatch({ type, ...payload });\n\nconst createAsyncAction = (type: string) => {\n  const typeName = camelize(type);\n  return {\n    [typeName]: createAction(type),\n    [`${typeName}Success`]: createAction(`${type}_SUCCESS`),\n    [`${typeName}Fail`]: createAction(`${type}_FAIL`),\n  }\n};\n\nconst actions: IActions = {\n  ...createAsyncAction('LOGIN'),\n  ...createAsyncAction('GET_USER'),\n  ...createAsyncAction('GET_MESSAGES'),\n  ...createAsyncAction('GET_MORE_MESSAGES'),\n  ...createAsyncAction('GET_SETTINGS'),\n  ...createAsyncAction('SET_SETTINGS'),\n  ...createAsyncAction('SEND_MESSAGE'),\n  ...createAsyncAction('SUBSCRIBE'),\n  ...createAsyncAction('UNSUBSCRIBE'),\n  ...createAsyncAction('UPLOAD_FILE'),\n  updateLastOnline: createAction('UPDATE_LAST_ONLINE'),\n  logout: createAction('LOGOUT'),\n};\n\nexport default actions;\n","import React from 'react';\nimport { Avatar as AntdAvatar } from 'antd';\nimport { AvatarProps } from 'antd/es/avatar';\nimport { colorFromString } from \"../../helpers/utils\";\n\ninterface IAvatarProps extends AvatarProps {\n  avatar: string;\n  nickname: string;\n}\n\nconst Avatar = (props: IAvatarProps) => {\n  const { avatar, nickname, style, ...rest } = props;\n\n  return (\n    <AntdAvatar\n      src={avatar}\n      style={{ ...style, backgroundColor: avatar ? 'transparent' : colorFromString(nickname) }}\n      {...rest}\n    >\n      {nickname}\n    </AntdAvatar>\n  )\n};\n\nexport default Avatar;\n","import React from 'react';\nimport { isURL } from \"../../helpers/utils\";\n\ninterface IMessageBodyProps {\n  message: string;\n}\n\nconst MessageBody = (props: IMessageBodyProps) => {\n  const { message } = props;\n\n  if (isURL(message)) {\n    if (/\\.(gif|jpe?g|tiff|png|webp|bmp)$/i.test(message)) {\n      return (\n        <img\n          src={message}\n          alt=\"\"\n        />\n      )\n    }\n\n    if (/youtu/.test(message)) {\n      const videoId = new URL(message).searchParams.get('v') || '';\n\n      return (\n        <iframe\n          title={videoId}\n          id=\"ytplayer\"\n          width=\"100%\"\n          height=\"360\"\n          src={`http://www.youtube.com/embed/${videoId}`}\n          frameBorder=\"0\"\n        />\n      )\n    }\n\n    return (\n      <a\n        href={message}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {message}\n      </a>\n    )\n  }\n\n  return <span>{message}</span>;\n};\n\nexport default MessageBody;\n","import React from 'react';\nimport { Card, Tooltip } from 'antd';\nimport { Link } from 'react-router-dom';\n\nimport { IMessage, ISettings } from '../../reducers';\nimport Avatar from '../Avatar';\nimport MessageBody from './MessageBody';\nimport {\n  getDate,\n  getFullTime,\n  getTime,\n  isOnline\n} from '../../helpers/utils';\n\ninterface IMessageProps {\n  message: IMessage,\n  user: ISettings,\n}\n\nconst Message = (props: IMessageProps) => {\n  const {\n    message: {\n      time,\n      body,\n    },\n    user,\n  } = props;\n\n  const title = user && (\n    <Link to={`./user/${user.uid}`}>\n      <Tooltip\n        title={`Last activity: ${getFullTime(user.lastOnline)}`}\n        placement=\"left\"\n      >\n        <div className={`chat-message__title ${isOnline(user.lastOnline) ? 'online' : ''}`}>\n          <Avatar\n            avatar={user.avatar}\n            nickname={user.nickname}\n          />\n          <div className=\"chat-message__nickname\">\n            {user.nickname}\n          </div>\n        </div>\n      </Tooltip>\n    </Link>\n  );\n\n  return (\n    <Card\n      className=\"chat-message\"\n      title={title}\n      key={time}\n      extra={(\n        <Tooltip title={getDate(time)}>\n          <div className=\"chat-time\">{getTime(time)}</div>\n        </Tooltip>\n      )}\n    >\n      <MessageBody message={body}/>\n    </Card>\n  );\n};\n\nexport default Message;\n","import React, {\n  ChangeEvent,\n  Component,\n  KeyboardEvent,\n  ClipboardEvent,\n  DragEvent,\n} from 'react';\nimport { connect } from 'react-redux';\nimport { User } from 'firebase';\nimport { SendOutlined } from '@ant-design/icons';\nimport {\n  Input,\n  message as notify,\n  Spin,\n} from 'antd';\n\nimport './chat.scss';\nimport actions from '../../actions';\nimport { IMessage, ISettings, IState, IUsers } from '../../reducers';\nimport Message from './Message';\n\ninterface IChatProps {\n  messages: IMessage[],\n  user: User | null,\n  settings: ISettings | false,\n  loading: boolean,\n  users: IUsers;\n}\n\ninterface IChatState {\n  message: string;\n  sending: boolean;\n}\n\nclass Chat extends Component<IChatProps, IChatState> {\n  state = {\n    message: '',\n    sending: false,\n  };\n\n  componentDidMount = () => {\n    actions.getMessages({});\n    actions.subscribe({});\n    this.setState({ message: localStorage.getItem('message') || '' });\n  };\n\n  componentWillUnmount = () => {\n    actions.unsubscribe({});\n  };\n\n  componentDidUpdate = (prevProps: IChatProps) => {\n    const { messages, users } = this.props;\n\n    if (this.state.sending && prevProps.messages !== messages) {\n      localStorage.setItem('message', '');\n      this.setState({\n        message: '',\n        sending: false,\n      });\n    }\n\n    messages.forEach((m: IMessage) => {\n      if (!users[m.author]) {\n        actions.getUser({ uid: m.author });\n      }\n    });\n  };\n\n  onChangeMessage = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const message = event.target.value;\n    localStorage.setItem('message', message);\n    this.setState({ message });\n  };\n\n  onKeyDown = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event.key === 'Enter' && !event.shiftKey) {\n      event.preventDefault();\n\n      this.onSendMessage();\n    }\n  };\n\n  onSendMessage = () => {\n    const { message } = this.state;\n    const { settings, user, loading } = this.props;\n\n    if (loading) {\n      return;\n    }\n\n    if (!user || !settings) {\n      notify.error('Not logged in. How are you even here? Contact administration');\n      return;\n    }\n\n    if (!settings.nickname) {\n      notify.error('User name is not defined. Go to settings and set it');\n      return;\n    }\n\n    if (!message) {\n      notify.error('Message is empty');\n      return;\n    }\n\n    this.setState({ sending: true });\n    actions.sendMessage({\n      uid: user.uid,\n      message,\n    });\n  };\n\n  getMoreMessages = () => {\n    actions.getMoreMessages({ firstMessage: this.props.messages[this.props.messages.length - 1] })\n  };\n\n  onScroll = (event: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    if (event.currentTarget.scrollTop <= 50) {\n      this.getMoreMessages();\n    }\n  };\n\n  uploadFile = (file: File, event: ClipboardEvent<HTMLTextAreaElement> | DragEvent<HTMLTextAreaElement>) => {\n    const { user } = this.props;\n    if (file && user) {\n      if (file.type.indexOf('image') > -1) {\n        actions.uploadFile({ uid: user.uid, file });\n      } else {\n        notify.error('Only images can be uploaded');\n      }\n      event.preventDefault();\n    }\n  };\n\n  onPaste = (e: ClipboardEvent<HTMLTextAreaElement>) => {\n    this.uploadFile(e.clipboardData.files[0], e)\n  };\n\n  onDrop = (e: DragEvent<HTMLTextAreaElement>) => {\n    const file = e.dataTransfer.items[0].getAsFile();\n    if (file)\n      this.uploadFile(file, e)\n  };\n\n  render = () => {\n    const { messages, loading, users } = this.props;\n\n    return (\n      <Spin spinning={loading}>\n        <div className={`chat-wrapper`}>\n          <div\n            className=\"chat-body\"\n            onScroll={this.onScroll}\n          >\n            {messages.map((m: IMessage) => (\n              <Message\n                key={m.time}\n                message={m}\n                user={users[m.author]}\n              />\n            ))}\n          </div>\n          <div className=\"chat-controls\">\n            <Input.TextArea\n              placeholder=\"Enter message\"\n              autoSize={{ minRows: 1, maxRows: 10 }}\n              onChange={this.onChangeMessage}\n              onKeyDown={this.onKeyDown}\n              value={this.state.message}\n              onPaste={this.onPaste}\n              onDrop={this.onDrop}\n            />\n            <SendOutlined\n              onClick={this.onSendMessage}\n            />\n          </div>\n        </div>\n      </Spin>\n    )\n  }\n}\n\nconst mapStateToProps = (state: IState) => {\n  const { messages, user, settings, loading, users, } = state;\n\n  return {\n    messages,\n    user,\n    settings,\n    loading,\n    users,\n  };\n};\n\nexport default connect(mapStateToProps)(Chat);\n","import React, { ChangeEvent } from 'react';\nimport { connect } from 'react-redux';\nimport { User } from 'firebase';\nimport {\n  Card,\n  Input,\n  Button,\n  Empty,\n  Spin,\n} from 'antd';\n\nimport { ClearOutlined } from '@ant-design/icons';\n\nimport actions from '../../actions';\nimport { IState, ISettings, defaultSettings } from '../../reducers';\nimport Avatar from '../Avatar';\n\ninterface ISettingsProps {\n  settings: ISettings | false;\n  loading: boolean;\n  user: User | null;\n}\n\nexport class Settings extends React.Component<ISettingsProps, ISettings> {\n  state = defaultSettings;\n\n  componentDidMount = () => {\n    const { user } = this.props;\n    if (user) {\n      actions.getSettings({ uid: user.uid });\n    }\n  };\n\n  onChange = (field: string) => (event: ChangeEvent<HTMLInputElement>) =>\n    // @ts-ignore\n    this.setState({ [field]: event.target.value });\n\n  getNewSettings = () => {\n    const { settings } = this.props;\n\n    const newSettings = {};\n    Object.entries(settings).forEach(([key, value]) => {\n      // @ts-ignore\n      newSettings[key] = this.state[key] || value;\n    });\n    return newSettings;\n  };\n\n  onSubmit = () => {\n    this.setSettings(this.getNewSettings());\n  };\n\n  setSettings = (newSettings: {}) => {\n    const { user } = this.props;\n    if (user) {\n      actions.setSettings({\n        uid: user.uid,\n        settings: newSettings,\n      });\n    }\n  };\n\n  getField = (key: string, value: string) => {\n    const { loading, settings } = this.props;\n    const { avatar, nickname } = this.state;\n\n    switch (key) {\n      case 'avatar':\n        return (\n          <div>\n            <div style={{ display: 'flex' }}>\n              <Input\n                defaultValue={avatar || value}\n                onChange={this.onChange(key)}\n                disabled={loading}\n              />\n              <Button\n                onClick={() => this.setSettings({\n                  ...this.getNewSettings(),\n                  avatar: '',\n                })}\n                disabled={!(avatar || value)}\n              >\n                <ClearOutlined/>\n              </Button>\n            </div>\n            <Avatar\n              avatar={avatar || value}\n              nickname={nickname || (settings && settings.nickname) || ''}\n              size={128}\n              style={{ margin: '8px auto', display: 'block' }}\n            />\n          </div>\n        );\n\n      // Don't display UID and lastOnline editor\n      case 'uid':\n      case 'lastOnline':\n        return false;\n\n      default:\n        return (\n          <Input\n            defaultValue={value}\n            onChange={this.onChange(key)}\n            disabled={loading}\n          />\n        )\n    }\n  };\n\n  render = () => {\n    const { settings, loading } = this.props;\n\n    if (!settings) {\n      return (\n        <Empty/>\n      )\n    }\n\n    return (\n      <div>\n        <Spin spinning={loading}>\n          {Object\n            .entries(settings)\n            .map(([key, value]) => {\n              const field = this.getField(key, value);\n              return field && (\n                <Card\n                  key={key}\n                  title={key.toUpperCase()}\n                >\n                  {field}\n                </Card>\n              )\n            })\n          }\n        </Spin>\n\n        <Button\n          onClick={this.onSubmit}\n          disabled={loading}\n        >\n          Submit\n        </Button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: IState) => {\n  const { settings, loading, user } = state;\n  return { settings, loading, user };\n};\n\nexport default connect(mapStateToProps)(Settings);\n","import { ConnectedComponent } from 'react-redux';\n\nimport Chat from '../components/Chat/index';\nimport Settings from '../components/Settings';\nimport Logout from '../components/Logout';\n\nexport interface IRoute {\n  label: string;\n  path: string;\n  component: ConnectedComponent<any, any>;\n}\n\nconst routes: IRoute[] = [\n  {\n    label: 'Chat',\n    path: '/text-roleplay/chat',\n    component: Chat,\n  },\n  {\n    label: 'Settings',\n    path: '/text-roleplay/settings',\n    component: Settings,\n  },\n  {\n    label: 'Logout',\n    path: '/text-roleplay/logout',\n    component: Logout,\n  },\n];\n\nexport default routes;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Avatar } from 'antd';\n\nimport actions from '../../actions';\n\nconst byeLink = 'https://cdn.lowgif.com/full/fc3d7d9abd06a92e-hi-bear-gifs-get-the-best-gif-on-giphy.gif';\n\nconst Logout = () => {\n  return (\n    <div>\n      <Avatar\n        src={byeLink}\n        size={256}\n        style={{ margin: '0 auto', display: 'block' }}\n      />\n      <br/>\n      <br/>\n      <Button\n        type=\"primary\"\n        size=\"large\"\n        onClick={() => actions.logout({ })}\n        style={{ width: '100%' }}\n      >\n        Logout\n      </Button>\n    </div>\n  )\n};\n\nexport default connect()(Logout);\n","import React from 'react';\nimport { Menu as AntdMenu } from 'antd';\nimport { Link, withRouter, RouteComponentProps } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport routes, { IRoute } from '../../configs/routes';\n\n\nfunction Menu(props: RouteComponentProps) {\n  return (\n    <AntdMenu\n      style={{ width: 256 }}\n      mode=\"inline\"\n      selectedKeys={[props.location.pathname]}\n    >\n      {routes.map((value: IRoute) => (\n        <AntdMenu.Item\n          key={value.path}\n          disabled={value.path === props.location.pathname}\n        >\n          <Link to={value.path}>\n            {value.label}\n          </Link>\n        </AntdMenu.Item>\n      ))}\n    </AntdMenu>\n  );\n}\n\nexport default connect()(withRouter(Menu));\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Form,\n  Input,\n  Button,\n} from 'antd';\n\nimport actions from '../../actions';\n\nconst Login = () => {\n  return (\n    <Form\n      onFinish={(values) => actions.login(values)}\n    >\n      <Form.Item\n        label=\"Email\"\n        name=\"email\"\n        rules={[{ required: true, message: 'Please input your email!' }]}\n      >\n        <Input/>\n      </Form.Item>\n      <Form.Item\n        label=\"Password\"\n        name=\"password\"\n        rules={[{ required: true, message: 'Please input your password!' }]}\n      >\n        <Input.Password/>\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Login\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default connect()(Login);\n","import React from 'react';\nimport {\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport routes, { IRoute } from '../../configs/routes';\nimport Login from '../Login';\nimport { IState } from \"../../reducers\";\n\ninterface IRouterProps {\n  isLoggedIn: boolean;\n}\n\nfunction Router(props: IRouterProps) {\n  if (!props.isLoggedIn) {\n    return (\n      <Switch>\n        <Route\n          path=\"*\"\n          component={Login}\n        />\n      </Switch>\n    )\n  }\n\n  return (\n    <Switch>\n      {\n        routes.map((value: IRoute) =>\n          <Route\n            key={value.path}\n            path={value.path}\n            component={value.component}\n          />\n        )\n      }\n      <Redirect to=\"/text-roleplay/chat\"/>\n    </Switch>\n  );\n}\n\nexport default connect((state: IState) => ({ isLoggedIn: state.isLoggedIn }))(Router);\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'antd/dist/antd.css';\n\nimport Menu from './components/Menu';\nimport Router from './components/Router';\n\nimport './App.css';\nimport { listenForActivity } from './helpers/utils';\n\nfunction App() {\n  listenForActivity();\n\n  return (\n    <BrowserRouter>\n      <Menu/>\n      <div className=\"app\">\n        <Router/>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import {\n  initializeApp,\n  auth as fbAuth,\n  database as fbDatabase\n} from 'firebase';\n\nimport firebaseConfig from '../configs/firebase.json';\nimport actions from '../actions';\n\nconst firebase = initializeApp(firebaseConfig);\nconst auth = fbAuth();\nconst database = fbDatabase();\n\nauth.onAuthStateChanged((user) => {\n  if (user) {\n    actions.loginSuccess({ user });\n    actions.getSettings({ uid: user.uid });\n  } else {\n    actions.logout({});\n  }\n});\n\nexport {\n  auth,\n  database,\n  firebase,\n}\n","import { takeLatest } from 'redux-saga/effects';\nimport { AnyAction } from 'redux';\n\nimport { auth, database } from '../helpers/firebase';\nimport actions, { IPayload } from '../actions/index';\n\nfunction* login(action: AnyAction) {\n  const { email, password } = action;\n  try {\n    const user = yield auth.signInWithEmailAndPassword(email, password);\n    actions.loginSuccess({ user });\n    localStorage.setItem('user', JSON.stringify(user.user));\n    localStorage.setItem('uid', user.uid);\n  } catch (error) {\n    console.error(error);\n    if (error.code === 'auth/user-not-found') {\n      const user = yield auth.createUserWithEmailAndPassword(email, password);\n      actions.loginSuccess({ user });\n      localStorage.setItem('user', JSON.stringify(user.user));\n      localStorage.setItem('uid', user.uid);\n    } else {\n      actions.loginFail({ error });\n    }\n  }\n}\n\nfunction* logout() {\n  localStorage.removeItem('user');\n  localStorage.removeItem('uid');\n  localStorage.removeItem('loggedIn');\n  yield auth.signOut();\n}\n\nfunction* getSettings(payload: IPayload) {\n  const { uid } = payload;\n\n  try {\n    const rawSettings = yield database\n      .ref('users')\n      .child(uid)\n      .once('value');\n\n    const settings = rawSettings.val();\n    actions.getSettingsSuccess({ settings });\n  } catch (error) {\n    console.error(error);\n    actions.getSettingsFail({ error });\n  }\n}\n\nfunction* setSettings(payload: IPayload) {\n  const { uid, settings } = payload;\n\n  try {\n    yield database\n      .ref('users')\n      .child(uid)\n      .set({\n        ...settings,\n        uid,\n      });\n\n    actions.setSettingsSuccess({});\n    actions.getSettings({ uid });\n  } catch (error) {\n    console.error(error);\n    actions.setSettingsFail({ error });\n  }\n}\n\nfunction* sendMessage(payload: IPayload) {\n  const { uid, message } = payload;\n  const time = new Date().getTime();\n\n  try {\n    yield database\n      .ref('messages')\n      .child(`${time}`)\n      .set({\n        time,\n        author: uid,\n        body: message,\n      });\n    localStorage.setItem('message', '');\n    actions.sendMessageSuccess({});\n  } catch (error) {\n    console.error(error);\n    actions.sendMessageFail({ error });\n  }\n}\n\nfunction subscribe() {\n  database\n    .ref('messages')\n    .orderByKey()\n    .limitToLast(1)\n    .on('value', (rawMessages) => {\n      const messages = Object.values(rawMessages.val() || {});\n      actions.getMessagesSuccess({\n        messages,\n        concat: true\n      });\n    });\n}\n\nfunction unsubscribe() {\n  database.ref('messages').off();\n}\n\nfunction* getMessages() {\n  const rawMessages = yield database\n    .ref('messages')\n    .orderByKey()\n    .limitToLast(30)\n    .once('value');\n\n  const messages = Object.values(rawMessages.val() || {});\n  actions.getMessagesSuccess({ messages });\n}\n\nfunction* getMoreMessages(payload: IPayload) {\n  const { firstMessage } = payload;\n\n  const rawMessages = yield database\n    .ref('messages')\n    .orderByKey()\n    .endAt(`${firstMessage.time}`)\n    .limitToLast(5)\n    .once('value');\n\n  const messages = Object.values(rawMessages.val() || {});\n  actions.getMessagesSuccess({ messages, concat: true });\n}\n\nconst requestedUsers: { [key: string]: true } = {};\n\nfunction getUser(payload: IPayload) {\n  const { uid } = payload;\n\n  if (requestedUsers[uid]) return;\n  requestedUsers[uid] = true;\n  database\n    .ref('users')\n    .child(uid)\n    .on('value', (rawUser) => {\n      const user = rawUser.val() || {};\n      actions.getUserSuccess({ user });\n    });\n}\n\nfunction* updateLastOnline() {\n  const uid = localStorage.getItem('uid');\n  if (!uid) return;\n  const time = new Date().getTime();\n\n  localStorage.setItem('lastActivity', `${time}`);\n  yield database\n    .ref('users')\n    .child(`${uid}`)\n    .child('lastOnline')\n    .set(time);\n}\n\nfunction uploadFile(payload: IPayload) {\n  const { file, uid } = payload;\n\n  const request = new XMLHttpRequest();\n  const formData = new FormData();\n\n  formData.append('image', file);\n\n  request.open('POST', 'https://api.imgur.com/3/image/');\n  request.setRequestHeader('Authorization', `Client-ID ea2c833b74d4583`);\n  request.onreadystatechange = () => {\n    if (request.status === 200 && request.readyState === 4) {\n      let res = JSON.parse(request.responseText);\n\n      actions.sendMessage({\n        uid,\n        message: res.data.link,\n      });\n    }\n  };\n\n  request.send(formData);\n}\n\nexport default function* watchForActions() {\n  yield takeLatest('LOGIN', login);\n  yield takeLatest('LOGOUT', logout);\n  yield takeLatest('GET_SETTINGS', getSettings);\n  yield takeLatest('GET_USER', getUser);\n  yield takeLatest('SET_SETTINGS', setSettings);\n  yield takeLatest('SEND_MESSAGE', sendMessage);\n  yield takeLatest('GET_MESSAGES', getMessages);\n  yield takeLatest('GET_MORE_MESSAGES', getMoreMessages);\n  yield takeLatest('SUBSCRIBE', subscribe);\n  yield takeLatest('UPDATE_LAST_ONLINE', updateLastOnline);\n  yield takeLatest('UNSUBSCRIBE', unsubscribe);\n  yield takeLatest('UPLOAD_FILE', uploadFile);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport saga from './sagas';\nimport store, { sagaMiddleware } from './helpers/store';\nimport * as serviceWorker from './serviceWorker';\n\nsagaMiddleware.run(saga);\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}